const sg = @import("sokol").gfx;
const std = @import("std");
const m = @import("../math.zig");
//
//    #version:1# (machine generated, don't edit!)
//
//    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)
//
//    Overview:
//    =========
//    Shader program: 'display':
//        Get shader desc: shd.displayShaderDesc(sg.queryBackend());
//        Vertex Shader: vs
//        Fragment Shader: fs
//        Attributes:
//            ATTR_display_position => 0
//            ATTR_display_texcoord => 1
//    Bindings:
//        Uniform block 'vs_params':
//            Zig struct: VsParams
//            Bind slot: UB_vs_params => 0
//        Texture 'offscreen_texture':
//            Image type: ._2D
//            Sample type: .FLOAT
//            Multisampled: false
//            Bind slot: VIEW_offscreen_texture => 0
//        Sampler 'sprite_sampler':
//            Type: .FILTERING
//            Bind slot: SMP_sprite_sampler => 0
//
pub const ATTR_display_position = 0;
pub const ATTR_display_texcoord = 1;
pub const UB_vs_params = 0;
pub const VIEW_offscreen_texture = 0;
pub const SMP_sprite_sampler = 0;
pub const VsParams = extern struct {
    u_time: f32 align(16),
    _pad_4: [12]u8 align(1) = undefined,
};
//
//    #version 430
//
//    layout(location = 0) in vec2 position;
//    layout(location = 0) out vec2 v_texcoord;
//    layout(location = 1) in vec2 texcoord;
//
//    void main()
//    {
//        gl_Position = vec4(position, 0.0, 1.0);
//        v_texcoord = texcoord;
//    }
//
//
const vs_source_glsl430 = [224]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x32,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,
    0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
//
//    #version 430
//
//    uniform vec4 vs_params[1];
//    layout(binding = 0) uniform sampler2D offscreen_texture_sprite_sampler;
//
//    layout(location = 0) in vec2 v_texcoord;
//    layout(location = 0) out vec4 frag_color;
//
//    vec3 rgb2hsv(vec3 c)
//    {
//        vec4 _90 = mix(vec4(c.zy, -1.0, 0.666666686534881591796875), vec4(c.yz, 0.0, -0.3333333432674407958984375), vec4(step(c.z, c.y)));
//        float _97 = _90.x;
//        vec4 _115 = mix(vec4(_97, _90.yw, c.x), vec4(c.x, _90.yz, _97), vec4(step(_97, c.x)));
//        float _118 = _115.x;
//        float _121 = _115.w;
//        float _123 = _115.y;
//        float _125 = _118 - min(_121, _123);
//        return vec3(abs(_115.z + ((_121 - _123) / ((6.0 * _125) + 1.0000000133514319600180897396058e-10))), _125 / (_118 + 1.0000000133514319600180897396058e-10), _118);
//    }
//
//    vec3 hsv2rgb(vec3 c)
//    {
//        return mix(vec3(1.0), clamp(abs((fract(c.xxx + vec3(1.0, 0.666666686534881591796875, 0.3333333432674407958984375)) * 6.0) - vec3(3.0)) - vec3(1.0), vec3(0.0), vec3(1.0)), vec3(c.y)) * c.z;
//    }
//
//    void main()
//    {
//        vec4 _167 = texture(offscreen_texture_sprite_sampler, v_texcoord);
//        vec3 param = _167.xyz;
//        vec3 _172 = rgb2hsv(param);
//        _172.x = fract(_172.x + vs_params[0].x);
//        vec3 param_1 = _172;
//        frag_color = vec4(hsv2rgb(param_1), _167.w);
//    }
//
//
const fs_source_glsl430 = [1241]u8 {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x30,0x29,0x20,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x6f,
    0x66,0x66,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x73,0x70,0x72,0x69,0x74,0x65,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,
    0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,
    0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x72,0x67,0x62,0x32,0x68,
    0x73,0x76,0x28,0x76,0x65,0x63,0x33,0x20,0x63,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x39,0x30,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,
    0x76,0x65,0x63,0x34,0x28,0x63,0x2e,0x7a,0x79,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x2c,
    0x20,0x30,0x2e,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x38,0x36,0x35,0x33,0x34,0x38,
    0x38,0x31,0x35,0x39,0x31,0x37,0x39,0x36,0x38,0x37,0x35,0x29,0x2c,0x20,0x76,0x65,
    0x63,0x34,0x28,0x63,0x2e,0x79,0x7a,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x30,
    0x2e,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x34,0x33,0x32,0x36,0x37,0x34,0x34,0x30,
    0x37,0x39,0x35,0x38,0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x34,0x28,0x73,0x74,0x65,0x70,0x28,0x63,0x2e,0x7a,0x2c,0x20,0x63,0x2e,0x79,0x29,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,
    0x37,0x20,0x3d,0x20,0x5f,0x39,0x30,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x31,0x31,0x35,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x76,
    0x65,0x63,0x34,0x28,0x5f,0x39,0x37,0x2c,0x20,0x5f,0x39,0x30,0x2e,0x79,0x77,0x2c,
    0x20,0x63,0x2e,0x78,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x2e,0x78,0x2c,
    0x20,0x5f,0x39,0x30,0x2e,0x79,0x7a,0x2c,0x20,0x5f,0x39,0x37,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x73,0x74,0x65,0x70,0x28,0x5f,0x39,0x37,0x2c,0x20,0x63,0x2e,
    0x78,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x31,0x31,0x38,0x20,0x3d,0x20,0x5f,0x31,0x31,0x35,0x2e,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,0x20,
    0x5f,0x31,0x31,0x35,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x31,0x32,0x33,0x20,0x3d,0x20,0x5f,0x31,0x31,0x35,0x2e,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x35,0x20,
    0x3d,0x20,0x5f,0x31,0x31,0x38,0x20,0x2d,0x20,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x32,
    0x31,0x2c,0x20,0x5f,0x31,0x32,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x61,0x62,0x73,0x28,0x5f,0x31,
    0x31,0x35,0x2e,0x7a,0x20,0x2b,0x20,0x28,0x28,0x5f,0x31,0x32,0x31,0x20,0x2d,0x20,
    0x5f,0x31,0x32,0x33,0x29,0x20,0x2f,0x20,0x28,0x28,0x36,0x2e,0x30,0x20,0x2a,0x20,
    0x5f,0x31,0x32,0x35,0x29,0x20,0x2b,0x20,0x31,0x2e,0x30,0x30,0x30,0x30,0x30,0x30,
    0x30,0x31,0x33,0x33,0x35,0x31,0x34,0x33,0x31,0x39,0x36,0x30,0x30,0x31,0x38,0x30,
    0x38,0x39,0x37,0x33,0x39,0x36,0x30,0x35,0x38,0x65,0x2d,0x31,0x30,0x29,0x29,0x29,
    0x2c,0x20,0x5f,0x31,0x32,0x35,0x20,0x2f,0x20,0x28,0x5f,0x31,0x31,0x38,0x20,0x2b,
    0x20,0x31,0x2e,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x33,0x33,0x35,0x31,0x34,
    0x33,0x31,0x39,0x36,0x30,0x30,0x31,0x38,0x30,0x38,0x39,0x37,0x33,0x39,0x36,0x30,
    0x35,0x38,0x65,0x2d,0x31,0x30,0x29,0x2c,0x20,0x5f,0x31,0x31,0x38,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x68,0x73,0x76,0x32,0x72,0x67,0x62,0x28,
    0x76,0x65,0x63,0x33,0x20,0x63,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6d,0x69,0x78,0x28,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,
    0x30,0x29,0x2c,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x61,0x62,0x73,0x28,0x28,0x66,
    0x72,0x61,0x63,0x74,0x28,0x63,0x2e,0x78,0x78,0x78,0x20,0x2b,0x20,0x76,0x65,0x63,
    0x33,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x36,0x36,0x36,0x36,0x36,0x36,0x36,
    0x38,0x36,0x35,0x33,0x34,0x38,0x38,0x31,0x35,0x39,0x31,0x37,0x39,0x36,0x38,0x37,
    0x35,0x2c,0x20,0x30,0x2e,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x34,0x33,0x32,0x36,
    0x37,0x34,0x34,0x30,0x37,0x39,0x35,0x38,0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x29,
    0x20,0x2a,0x20,0x36,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x33,0x28,0x33,
    0x2e,0x30,0x29,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x29,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x28,0x31,0x2e,0x30,0x29,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x63,0x2e,
    0x79,0x29,0x29,0x20,0x2a,0x20,0x63,0x2e,0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x36,0x37,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x6f,0x66,0x66,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x73,0x70,0x72,0x69,0x74,0x65,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x2c,0x20,0x76,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x20,0x3d,0x20,0x5f,0x31,0x36,0x37,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x37,0x32,0x20,0x3d,0x20,0x72,0x67,
    0x62,0x32,0x68,0x73,0x76,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x5f,0x31,0x37,0x32,0x2e,0x78,0x20,0x3d,0x20,0x66,0x72,0x61,0x63,0x74,
    0x28,0x5f,0x31,0x37,0x32,0x2e,0x78,0x20,0x2b,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x31,
    0x37,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x68,0x73,0x76,0x32,0x72,0x67,
    0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x2c,0x20,0x5f,0x31,0x36,0x37,
    0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
pub fn displayShaderDesc(backend: sg.Backend) sg.ShaderDesc {
    var desc: sg.ShaderDesc = .{};
    desc.label = "display_shader";
    switch (backend) {
        .GLCORE => {
            desc.vertex_func.source = &vs_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = &fs_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = .FLOAT;
            desc.attrs[0].glsl_name = "position";
            desc.attrs[1].base_type = .FLOAT;
            desc.attrs[1].glsl_name = "texcoord";
            desc.uniform_blocks[0].stage = .FRAGMENT;
            desc.uniform_blocks[0].layout = .STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = .FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "vs_params";
            desc.views[0].texture.stage = .FRAGMENT;
            desc.views[0].texture.image_type = ._2D;
            desc.views[0].texture.sample_type = .FLOAT;
            desc.views[0].texture.multisampled = false;
            desc.samplers[0].stage = .FRAGMENT;
            desc.samplers[0].sampler_type = .FILTERING;
            desc.texture_sampler_pairs[0].stage = .FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[0].glsl_name = "offscreen_texture_sprite_sampler";
        },
        else => {},
    }
    return desc;
}
